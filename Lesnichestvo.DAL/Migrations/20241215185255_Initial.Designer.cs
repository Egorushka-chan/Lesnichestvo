// <auto-generated />
using System;
using Lesnichestvo.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lesnichestvo.DAL.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20241215185255_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CompanyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ContractDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("INN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.Dacha", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NetworkID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("NetworkID");

                    b.ToTable("Dachas");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.Inspection", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("QuartalNetworkID")
                        .HasColumnType("int");

                    b.Property<int>("WorkID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("QuartalNetworkID");

                    b.HasIndex("WorkID");

                    b.ToTable("Inspections");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.Item", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.Mapping", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("DachaID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NetworkID")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<double>("XCoord")
                        .HasColumnType("float");

                    b.Property<double>("YCoord")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("DachaID");

                    b.HasIndex("NetworkID");

                    b.ToTable("Mapping");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.Qualification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CertificateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssuedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkerID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("WorkerID");

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.QuartalNetwork", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Importance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("QuartalNetworks");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.Report", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Conclusion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InspectionID")
                        .HasColumnType("int");

                    b.Property<string>("TakenMeasures")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("InspectionID");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.SoldWood", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("WoodTypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("WoodTypeID");

                    b.ToTable("SoldWoods");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.UnsoldWood", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("WoodTypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("WoodTypeID");

                    b.ToTable("UnsoldWoods");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.WoodType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("WoodTypes");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.Work", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("HoursSpent")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousWorkID")
                        .HasColumnType("int");

                    b.Property<int>("TypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PreviousWorkID");

                    b.HasIndex("TypeID");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.WorkHasInventory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<int>("WorkID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ItemID");

                    b.HasIndex("WorkID");

                    b.ToTable("WorkHasInventory");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.WorkHasWorkers", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("WorkID")
                        .HasColumnType("int");

                    b.Property<int>("WorkerID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("WorkID");

                    b.HasIndex("WorkerID");

                    b.ToTable("WorkHasWorkers");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.WorkType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("WorkTypes");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.Worker", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Payment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.Dacha", b =>
                {
                    b.HasOne("Lesnichestvo.DAL.Entities.QuartalNetwork", "QuartalNetwork")
                        .WithMany("Dachas")
                        .HasForeignKey("NetworkID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuartalNetwork");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.Inspection", b =>
                {
                    b.HasOne("Lesnichestvo.DAL.Entities.QuartalNetwork", "QuartalNetwork")
                        .WithMany("Inspections")
                        .HasForeignKey("QuartalNetworkID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lesnichestvo.DAL.Entities.Work", "Work")
                        .WithMany("Inspections")
                        .HasForeignKey("WorkID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuartalNetwork");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.Mapping", b =>
                {
                    b.HasOne("Lesnichestvo.DAL.Entities.Dacha", "Dacha")
                        .WithMany("Mapping")
                        .HasForeignKey("DachaID");

                    b.HasOne("Lesnichestvo.DAL.Entities.QuartalNetwork", "QuartalNetwork")
                        .WithMany()
                        .HasForeignKey("NetworkID");

                    b.Navigation("Dacha");

                    b.Navigation("QuartalNetwork");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.Qualification", b =>
                {
                    b.HasOne("Lesnichestvo.DAL.Entities.Worker", "Worker")
                        .WithMany("Qualifications")
                        .HasForeignKey("WorkerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.Report", b =>
                {
                    b.HasOne("Lesnichestvo.DAL.Entities.Inspection", "Inspection")
                        .WithMany("Reports")
                        .HasForeignKey("InspectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inspection");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.SoldWood", b =>
                {
                    b.HasOne("Lesnichestvo.DAL.Entities.Customer", "Customer")
                        .WithMany("SoldWoods")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lesnichestvo.DAL.Entities.WoodType", "WoodType")
                        .WithMany("SoldWoods")
                        .HasForeignKey("WoodTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("WoodType");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.UnsoldWood", b =>
                {
                    b.HasOne("Lesnichestvo.DAL.Entities.WoodType", "WoodType")
                        .WithMany("UnsoldWoods")
                        .HasForeignKey("WoodTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WoodType");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.Work", b =>
                {
                    b.HasOne("Lesnichestvo.DAL.Entities.Work", "PreviousWork")
                        .WithMany()
                        .HasForeignKey("PreviousWorkID");

                    b.HasOne("Lesnichestvo.DAL.Entities.WorkType", "WorkType")
                        .WithMany("Works")
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PreviousWork");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.WorkHasInventory", b =>
                {
                    b.HasOne("Lesnichestvo.DAL.Entities.Item", "Item")
                        .WithMany("WorksHasItem")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lesnichestvo.DAL.Entities.Work", "Work")
                        .WithMany("Inventory")
                        .HasForeignKey("WorkID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.WorkHasWorkers", b =>
                {
                    b.HasOne("Lesnichestvo.DAL.Entities.Work", "Work")
                        .WithMany("Workers")
                        .HasForeignKey("WorkID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lesnichestvo.DAL.Entities.Worker", "Worker")
                        .WithMany("Works")
                        .HasForeignKey("WorkerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Work");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.Customer", b =>
                {
                    b.Navigation("SoldWoods");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.Dacha", b =>
                {
                    b.Navigation("Mapping");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.Inspection", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.Item", b =>
                {
                    b.Navigation("WorksHasItem");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.QuartalNetwork", b =>
                {
                    b.Navigation("Dachas");

                    b.Navigation("Inspections");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.WoodType", b =>
                {
                    b.Navigation("SoldWoods");

                    b.Navigation("UnsoldWoods");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.Work", b =>
                {
                    b.Navigation("Inspections");

                    b.Navigation("Inventory");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.WorkType", b =>
                {
                    b.Navigation("Works");
                });

            modelBuilder.Entity("Lesnichestvo.DAL.Entities.Worker", b =>
                {
                    b.Navigation("Qualifications");

                    b.Navigation("Works");
                });
#pragma warning restore 612, 618
        }
    }
}
